name: üõ†Ô∏è Builds
on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            identifier: linux
            runner: ubuntu-18.04
            executable: "openplayer"
          - name: Windows
            identifier: windows
            runner: ubuntu-20.04
            executable: "openplayer.exe"
          - name: Android
            identifier: android
            runner: ubuntu-20.04
            executable: "openplayer.apk"

    steps:

### INSTALL DEPENDENCIES ###

      - name: (Bionic) Change package sources and install base dependencies
        if: ${{ matrix.runner == 'ubuntu-18.04' }}
        shell: sh
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo tee -a /etc/apt/sources.list << EOT
          deb http://archive.ubuntu.com/ubuntu/ bionic main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu/ bionic-updates main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu/ bionic-backports main restricted universe multiverse
          EOT
          
          sudo apt-get update
          sudo apt-get install build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm

      - name: (Focal) Change package sources and install base dependencies
        if: ${{ matrix.runner == 'ubuntu-20.04' }}
        shell: sh
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo tee -a /etc/apt/sources.list << EOT
          deb http://archive.ubuntu.com/ubuntu/ focal main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu/ focal-updates main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu/ focal-security main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse
          EOT
          
          sudo apt-get update
          sudo apt-get install build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm

      - name: (Windows) Install mingw64
        if: ${{ matrix.identifier == 'windows' }}
        shell: sh
        run: |
          sudo apt-get install mingw-w64
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix

      - name: (Android) Set up Java 11
        if: ${{ matrix.identifier == 'android' }}
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: (Android) Setup Android SDK
        if: ${{ matrix.identifier == 'android' }}
        uses: android-actions/setup-android@v2

      - name: (Android) Install Android Tools
        if: ${{ matrix.identifier == 'android' }}
        shell: sh
        run: |
          "$ANDROID_SDK_ROOT"/cmdline-tools/latest/bin/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "build-tools;30.0.3" "platforms;android-29" "cmdline-tools;latest" "cmake;3.10.2.4988404" "ndk;21.4.7075529"

### COMPILE GODOT ###

      - uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: 3.x
          path: godot

      - uses: actions/checkout@v2
        with:
          repository: nathanfranke/gdaudioyt
          path: godot/modules/gdaudioyt

      - uses: actions/checkout@v2
        with:
          path: project

      - name: Setup Godot build cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons-cache/
          key: ${{ matrix.identifier }}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{ matrix.identifier }}-${{github.ref}}-${{github.sha}}
            ${{ matrix.identifier }}-${{github.ref}}-
            ${{ matrix.identifier }}-

      - name: Setup python and scons
        uses: ./godot/.github/actions/godot-deps

      - name: Make global bin/ folder (to fix godot-build error)
        shell: sh
        run: |
          mkdir ./bin/

      - name: Compile Godot Tools
        uses: ./godot/.github/actions/godot-build
        with:
          sconsflags: --directory='${{ github.workspace }}/godot'
          platform: x11
          target: release_debug
          tools: true

      - name: Copy Build Configuration
        shell: sh
        run: |
          cp '${{ github.workspace }}/project/misc/custom.py' '${{ github.workspace }}/godot/custom.py'

      - name: (Linux) Compile Godot Export Template
        if: ${{ matrix.identifier == 'linux' }}
        uses: ./godot/.github/actions/godot-build
        with:
          sconsflags: --directory='${{ github.workspace }}/godot'
          platform: x11
          target: release
          tools: false

      - name: (Windows) Compile Godot Export Template
        if: ${{ matrix.identifier == 'windows' }}
        uses: ./godot/.github/actions/godot-build
        with:
          sconsflags: --directory='${{ github.workspace }}/godot'
          platform: windows
          target: release
          tools: false

      - name: (Android) Compile Godot Export Template (armv7)
        if: ${{ matrix.identifier == 'android' }}
        uses: ./godot/.github/actions/godot-build
        with:
          sconsflags: --directory='${{ github.workspace }}/godot' android_arch=armv7
          platform: android
          target: release
          tools: false

      - name: (Android) Compile Godot Export Template (arm64v8)
        if: ${{ matrix.identifier == 'android' }}
        uses: ./godot/.github/actions/godot-build
        with:
          sconsflags: --directory='${{ github.workspace }}/godot' android_arch=arm64v8
          platform: android
          target: release
          tools: false

      - name: (Android) Generate Godot templates
        if: ${{ matrix.identifier == 'android' }}
        run: |
          pushd godot/platform/android/java/
          ./gradlew generateGodotTemplates
          popd

### SET UP KEYSTORE ###

      - name: (Android) Create Keystore
        if: ${{ matrix.identifier == 'android' }}
        run: |
          echo '${{ secrets.ANDROID_KEYSTORE }}' | base64 -di > release.keystore

      - name: (Android) Set Keystore in Editor Settings
        if: ${{ matrix.identifier == 'android' }}
        run: |
          touch '${{ github.workspace }}/godot/bin/_sc_'
          mkdir -p '${{ github.workspace }}/godot/bin/editor_data/'
          tee -a '${{ github.workspace }}/godot/bin/editor_data/editor_settings-3.tres' << EOT
          [gd_resource type="EditorSettings" format=2]
          [resource]
          export/android/android_sdk_path = "$ANDROID_SDK_ROOT"
          EOT
          

### EXPORT PROJECT ###

      - name: (Linux) Create Export Preset
        if: ${{ matrix.identifier == 'linux' }}
        shell: sh
        run: |
          tee -a '${{ github.workspace }}/project/export_presets.cfg' << EOT
          [preset.0]
          name="EXPORT_PRESET"
          platform="Linux/X11"
          runnable=true
          export_filter="all_resources"
          include_filter=""
          exclude_filter=""
          [preset.0.options]
          custom_template/release="${{ github.workspace }}/godot/bin/godot.x11.opt.64"
          EOT

      - name: (Windows) Create Export Preset
        if: ${{ matrix.identifier == 'windows' }}
        shell: sh
        run: |
          tee -a '${{ github.workspace }}/project/export_presets.cfg' << EOT
          [preset.0]
          name="EXPORT_PRESET"
          platform="Windows Desktop"
          runnable=true
          export_filter="all_resources"
          include_filter=""
          exclude_filter=""
          [preset.0.options]
          custom_template/release="${{ github.workspace }}/godot/bin/godot.windows.opt.64.exe"
          application/icon="res://app/branding/windows/icon.ico"
          EOT

      - name: (Android) Create Export Preset
        if: ${{ matrix.identifier == 'android' }}
        shell: sh
        run: |
          tee -a '${{ github.workspace }}/project/export_presets.cfg' << EOT
          [preset.0]
          name="EXPORT_PRESET"
          platform="Android"
          runnable=true
          export_filter="all_resources"
          include_filter=""
          exclude_filter=""
          [preset.0.options]
          custom_template/export_format=0
          architectures/armeabi-v7a=true
          architectures/arm64-v8a=true
          architectures/x86=false
          architectures/x86_64=false
          custom_template/release="${{ github.workspace }}/godot/bin/android_release.apk"
          keystore/debug="${{ github.workspace }}/release.keystore"
          keystore/debug_user="empty"
          keystore/debug_password="empty"
          keystore/release="${{ github.workspace }}/release.keystore"
          keystore/release_user="${{ secrets.ANDROID_KEYSTORE_USERNAME }}"
          keystore/release_password="${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
          version/code=1
          version/name="1.0"
          package/unique_name="sh.nathan.\$genname"
          package/name="Player"
          launcher_icons/main_192x192="res://app/branding/android/adaptive_main.png"
          launcher_icons/adaptive_foreground_432x432="res://app/branding/android/adaptive_fg.png"
          launcher_icons/adaptive_background_432x432="res://app/branding/android/adaptive_bg.png"
          screen/immersive_mode=false
          permissions/internet=true
          permissions/vibrate=true
          EOT

      - name: Build Project
        shell: sh
        run: |
          mkdir '${{ github.workspace }}/build'
          xvfb-run '${{ github.workspace }}/godot/bin/godot.x11.opt.tools.64' --audio-driver Dummy --path '${{ github.workspace }}/project' --export EXPORT_PRESET '${{ github.workspace }}/build/${{ matrix.executable }}'

      - name: (Linux) Add Distribution Files
        if: ${{ matrix.identifier == 'linux' }}
        shell: sh
        run: |
          cp '${{ github.workspace }}/project/app/branding/linux/icon.svg' 'icon.svg'
          cp '${{ github.workspace }}/project/misc/openplayer.desktop' 'openplayer.desktop'

### UPLOAD ARTIFACT ###

      - name: Get version name
        id: version
        run: echo ::set-output name=version::${GITHUB_REF#refs/*/}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: openplayer_${{ steps.version.outputs.version }}_${{ matrix.identifier }}
          path: ${{ github.workspace }}/build/
